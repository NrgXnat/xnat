/*
 * web: build.gradle
 * XNAT https://www.xnat.org
 * Copyright (c) 2005-2020, Washington University School of Medicine and Howard Hughes Medical Institute
 * All Rights Reserved
 *  
 * Released under the Simplified BSD.
 */

buildscript {
    ext {
        vXnat = "1.8.11-SNAPSHOT"
    }
}

plugins {
    id "eclipse"
    id "groovy"
    id "idea"
    id "jacoco"
    id "java-library"
    id "maven-publish"
    id "war"
    id "com.bmuschko.cargo" version "2.8.0"
    id "com.bmuschko.tomcat" version "2.5"
    id "com.dorongold.task-tree" version "1.5"
    id "com.palantir.git-version" version "0.12.1"
    id "io.franzbecker.gradle-lombok" version "4.0.0"
    id "io.spring.dependency-management" version "1.0.11.RELEASE"
    id "net.linguica.maven-settings" version "0.5"
}

group "org.nrg.xnat"
version vXnat
description "XNAT is an open-source imaging informatics software platform dedicated to helping you perform imaging-based research. XNATâ€™s core functions manage importing, archiving, processing and securely distributing imaging and related study data. But its extended uses continue to evolve."

repositories {
    mavenLocal()
    maven { url "https://nrgxnat.jfrog.io/nrgxnat/libs-release" }
    maven { url "https://nrgxnat.jfrog.io/nrgxnat/libs-snapshot" }
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

war.archiveBaseName.set hasProperty("archiveName") ? (archiveName.endsWith(".war") ? archiveName : "${archiveName}.war") : "xnat-web"


configurations {
    javadocCoverage

    all {
        exclude group: "ant", module: "ant"
        exclude group: "avalon-logkit"
        exclude group: "berkeleydb"
        exclude group: "com.github.jai-imageio"
        exclude group: "com.google.code.findbugs", module: "annotations"
        exclude group: "com.metaparadigm"
        exclude group: "com.sun.jdmk", module: "jmxtools"
        exclude group: "com.sun.jmx", module: "jmxri"
        exclude group: "commons-beanutils", module: "commons-beanutils-core"
        exclude group: "commons-betwixt"
        exclude group: "commons-dbcp"
        exclude group: "commons-email"
        exclude group: "commons-logging"
        exclude group: "commons-messenger"
        exclude group: "commons-pool"
        exclude group: "edu.ucar", module: "netcdf"
        exclude group: "excalibur-component"
        exclude group: "excalibur-instrument"
        exclude group: "excalibur-logger"
        exclude group: "excalibur-pool"
        exclude group: "fulcrum"
        exclude group: "geronimo-spec"
        exclude group: "hsqldb"
        exclude group: "imagej"
        exclude group: "jakarta-regexp"
        exclude group: "jamon"
        exclude group: "javax.jms", module: "jms"
        exclude group: "javax.mail", module: "mail"
        exclude group: "javax.servlet", module: "servlet-api"
        exclude group: "javax.sql", module: "jdbc-stdext"
        exclude group: "javax.transaction", module: "jta"
        exclude group: "javax.xml", module: "jsr173"
        exclude group: "jdbc", module: "jdbc"
        exclude group: "jmock"
        exclude group: "jms", module: "jms"
        exclude group: "jndi"
        exclude group: "jython"
        exclude group: "log4j", module: "log4j"
        exclude group: "mockobjects"
        exclude group: "mysql"
        exclude group: "net.sf.saxon"
        exclude group: "ojb", module: "ojb"
        exclude group: "org.apache.geronimo.specs"
        exclude group: "org.apache.struts"
        exclude group: "org.nrg", module: "nrg"
        exclude group: "org.nrg", module: "nrgutil"
        exclude group: "org.nrg", module: "plexiviewer"
        exclude group: "org.nrg.xdat", module: "beans"
        exclude group: "org.nrg.xnat", module: "web"
        exclude group: "org.slf4j", module: "slf4j-log4j12"
        exclude group: "quartz"
        exclude group: "resources", module: "resources"
        exclude group: "servletapi"
        exclude group: "stax", module: "stax-api"
        exclude group: "tomcat"
        exclude group: "velocity"
        exclude group: "xalan"
        exclude group: "xerces"
        exclude group: "xml-apis"
        exclude group: "xml-resolver"
        exclude group: "xmlrpc"
        exclude module: "log4j-slf4j-impl"
        exclude module: "pipelineCNDAXNAT"
        exclude module: "slf4j-simple"
    }
}

configurations.all {
    resolutionStrategy.force "org.mockito:mockito-core:${dependencyManagement.importedProperties["mockito.version"] as String}"
}

dependencies {
    annotationProcessor libs.framework
    annotationProcessor libs.auto.value
    annotationProcessor libs.auto.value.annotations
    implementation libs.auto.value.annotations

    implementation libs.validation.api
    annotationProcessor libs.validation.api

    annotationProcessor libs.lombok
    testAnnotationProcessor libs.lombok

    // Each project has a dependency on the platform
    api(platform(project(":parent")))

    // NRG dependencies first.
    api libs.core
    api libs.xnat.data.models
    api libs.framework
    api libs.spring.security.ldap
    api libs.spring.security.oauth2
    api libs.spring.security.jwt
    api libs.spring.web
    api libs.spring.jms
    api libs.spring.jdbc
    api libs.spring.beans
    api libs.spring.context
    api libs.spring.core

    implementation libs.spawner
    implementation libs.core
    implementation libs.framework
    implementation libs.transaction
    implementation libs.prefs
    implementation libs.config
    implementation libs.automation
    implementation libs.dicomtools
    implementation libs.dicom.edit4
    implementation libs.dicom.edit6
    implementation libs.mail
    implementation libs.notify

    implementation libs.dicom.xnat.mx
    implementation libs.dicom.xnat.sop
    implementation libs.dicom.xnat.util
    implementation libs.ecat4xnat
    implementation libs.extattr
    implementation libs.dicomimageutils
    implementation libs.prearcimporter
    implementation libs.sessionbuilders

    implementation(libs.plexiviewer) {
        transitive = false
    }

    implementation libs.pipeline.base
    implementation libs.pipeline.build
    implementation libs.pipeline.workflow
    implementation libs.pipeline.xnat
    implementation libs.pipeline.client
    implementation libs.pipeline.xnat.pipeline
    implementation libs.pipeline.xnat.tools

    implementation libs.dcm4che.core
    implementation libs.dcm4che.image
    implementation libs.dcm4che.imageio
    implementation libs.dcm4che.imageio.rle
    implementation libs.dcm4che.iod
    implementation libs.dcm4che.net
    implementation libs.imagej
    implementation libs.dcm4che5.core
    implementation libs.dcm4che5.image
    implementation libs.dcm4che5.imageio

    implementation libs.spring.aop
    implementation libs.spring.context.support
    implementation libs.spring.jms
    implementation libs.spring.messaging
    implementation libs.spring.orm
    implementation libs.spring.oxm
    implementation libs.spring.tx
    implementation libs.spring.webmvc

    implementation libs.springfox.swagger2
    implementation libs.springfox.swagger.ui

    implementation libs.spring.security.acl
    implementation libs.spring.security.aspects
    implementation libs.spring.security.config
    implementation libs.spring.security.taglibs
    implementation libs.spring.ldap.core

    implementation libs.hibernate.core
    implementation libs.hibernate.ehcache
    implementation libs.hibernate.validator
    implementation libs.hibernate.envers
    implementation libs.ehcache.core
    implementation libs.hibernate.types43

    implementation libs.aspectjweaver
    implementation libs.aspectjrt

    implementation libs.com.noelios.restlet
    implementation libs.com.noelios.restlet.ext.servlet
    implementation libs.org.restlet.ext.fileupload

    implementation libs.jackson.annotations
    implementation libs.jackson.core
    implementation libs.jackson.databind
    implementation libs.jackson.dataformat.yaml
    implementation libs.jackson.datatype.hibernate4
    implementation libs.jackson.datatype.guava
    implementation libs.jackson.module.parameter.names
    implementation libs.jackson.datatype.jdk8
    implementation libs.jackson.datatype.jsr310
    implementation libs.json.path
    implementation libs.json

    implementation libs.commons.beanutils
    implementation libs.commons.codec
    implementation libs.commons.collections
    implementation libs.commons.configuration
    implementation libs.commons.digester
    implementation libs.commons.discovery
    implementation libs.commons.fileupload
    implementation libs.commons.net

    implementation libs.commons.configuration2
    implementation libs.commons.math
    implementation libs.commons.text
    implementation libs.httpclient
    implementation libs.httpcore
    implementation libs.httpcore.nio
    implementation libs.httpmime
    implementation libs.commons.pool2

    implementation libs.groovy.all

    implementation libs.useragentutils
    implementation libs.fast.md5
    implementation libs.h2
    implementation libs.itext
    implementation libs.msv.core
    implementation libs.java.getopt
    implementation libs.quartz
    implementation libs.reflections
    implementation libs.xmlbeans
    implementation libs.xmlbeans.xpath
    implementation libs.xbean.spring
    implementation libs.xsdlib
    implementation libs.jstl
    implementation libs.gson
    implementation libs.guava
    implementation libs.postgresql
    implementation libs.datasource.proxy
    implementation libs.activemq.broker
    implementation libs.activemq.spring
    implementation libs.activemq.kahadb.store
    implementation libs.activemq.jdbc.store
    implementation libs.micrometer.core
    implementation libs.micrometer.registry.prometheus

    implementation libs.slf4j.api
    implementation libs.jul.to.slf4j
    implementation libs.jcl.over.slf4j
    implementation libs.log4j.over.slf4j
    implementation libs.logback.classic
    implementation libs.logback.core
    implementation libs.logstash.logback.encoder

    providedCompile libs.jsr305
    providedCompile libs.javax.servlet.api
    providedCompile libs.jetbrains.annotations
    providedCompile libs.metainf.services

    runtimeOnly libs.ant
    runtimeOnly libs.axis.ant
    runtimeOnly libs.axis.schema
    runtimeOnly libs.cglib
    runtimeOnly libs.hikaricp
    runtimeOnly libs.hsqldb
    runtimeOnly libs.jai.imageio
    runtimeOnly libs.javamelody.core
    runtimeOnly libs.javassist
    runtimeOnly libs.jython.standalone

    tomcat libs.tomcat.embed.core,
            libs.tomcat.embed.logging.juli,
            libs.tomcat.embed.jasper

    cargo libs.cargo.core.uberjar,
            libs.cargo.ant,
            libs.jcl.over.slf4j,
            libs.slf4j.api,
            libs.logback.classic,
            libs.logback.core

    testImplementation libs.nrg.test
    testImplementation libs.junit
    testImplementation libs.spring.test
    testImplementation libs.assertj.core
    testImplementation libs.spring.security.test
    testImplementation libs.spring.security.config
    testImplementation libs.hamcrest
    testImplementation libs.mockito.core
    testImplementation libs.powermock.api.mockito2
    testImplementation libs.powermock.module.junit4

    javadocCoverage libs.javadoc.coverage
}

idea {
    module {
        inheritOutputDirs = false
        outputDir = compileJava.destinationDir
        testOutputDir = compileTestJava.destinationDir
    }
}

tomcatRun.contextPath = "/"
tomcatRunWar.contextPath = "/"

[tomcatRun, tomcatRunWar].each { task ->
    task.additionalRuntimeResources << file("${System.getenv().XNAT_HOME ?: System.getenv().HOME}/config/plugins")
}

["Java", "War"].each { type ->
    ["Local", "Repository"].each { target ->
        def artifactName = type == "Java" ? "Jar" : type
        def taskName = "publish${artifactName}To${target}"
        logger.info "Creating task ${taskName}"
        tasks.create(name: taskName) {
            description = "Publishes the Maven ${type} publications to Maven ${target}."
            dependsOn tasks.withType(AbstractPublishToMaven).matching {
                it.name == "publishMaven${type}PublicationToMaven${target}"
            }
        }
    }
}

task deployToTomcat(type: Copy, dependsOn: war) {
    from war.archiveFile
    into "${propertyWithDefault("tomcatHome", ".")}/webapps"
}

cargo {
    // These properties must be set in the ~/.gradle/gradle.properties file or passed on the Gradle command line in
    // the form -PdeployPort=8080 -PdeployContext=/ -PdeployHost=localhost -PdeployUser=deploy -PdeployPassword=deploy
    containerId = "tomcat8x"
    port = propertyWithDefault("deployPort", 8080) as int

    deployable {
        context = propertyWithDefault("deployContext", "/")
    }

    remote {
        hostname = propertyWithDefault("deployHost", "localhost")
        username = propertyWithDefault("deployUser", "deploy")
        password = propertyWithDefault("deployPassword", "deploy")
    }
}

// Pulls in the Jenkins BUILD_NUMBER environment variable if available.
def buildDate = new Date()
def buildNumber = System.getenv().BUILD_NUMBER?.toInteger() ?: "Manual"
def isDirty, branchName, gitHash, gitHashFull, commitDistance, lastTag, isCleanTag

try {
    def gitDetails = versionDetails()
    isDirty = gitVersion().endsWith ".dirty"
    branchName = gitDetails.branchName ?: "Unknown"
    gitHash = gitDetails.gitHash
    gitHashFull = gitDetails.gitHashFull
    commitDistance = gitDetails.commitDistance
    lastTag = gitDetails.lastTag
    isCleanTag = gitDetails.isCleanTag
} catch (IllegalArgumentException e) {
    logger.info "Got an error trying to read VCS metadata from git. It's possible this project is not under VCS control. Using placeholder values for manifest entries."
    isDirty = true
    branchName = "Unknown"
    gitHash = "None"
    gitHashFull = "None"
    commitDistance = 0
    lastTag = "None"
    isCleanTag = false
}

logger.info "Build-Date:              ${buildDate}"
logger.info "Build-Number:            ${buildNumber}"
logger.info "Implementation-Version:  ${version}"
logger.info "Implementation-Sha-Full: ${gitHashFull}"
logger.info "Implementation-Sha:      ${gitHash}"
logger.info "Implementation-Commit:   ${commitDistance}"
logger.info "Implementation-LastTag:  ${lastTag}"
logger.info "Implementation-Branch:   ${branchName}"
logger.info "Implementation-CleanTag: ${isCleanTag}"
logger.info "Implementation-Dirty:    ${isDirty}"

ext.gitManifest = manifest {
    attributes "Application-Name": "XNAT",
            "Build-Date": buildDate,
            "Build-Number": buildNumber,
            "Implementation-Version": project.version,
            "Implementation-Sha": gitHash,
            "Implementation-Sha-Full": gitHashFull,
            "Implementation-Commit": commitDistance,
            "Implementation-LastTag": lastTag,
            "Implementation-Branch": branchName,
            "Implementation-CleanTag": isCleanTag,
            "Implementation-Dirty": isDirty
}

jar {
    manifest {
        from gitManifest
    }
}

war {
    duplicatesStrategy = DuplicatesStrategy.WARN
    manifest {
        from gitManifest
    }
}

test {
    systemProperties["xnat.home"] = "${buildDir}/tmp/test"
}

jacoco {
    toolVersion = dependencyManagement.importedProperties["jacoco.version"] as String
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = false
        csv.required = false
        html.required = true
    }
}

task javadocCoverageReport(type: Javadoc, dependsOn: javadoc) {
    source = sourceSets.main.allJava
    destinationDir = reporting.file("javadoc")
    classpath = configurations.compileClasspath
    options.docletpath = configurations.javadocCoverage.files.asType(List)
    options.doclet = "com.manoelcampos.javadoc.coverage.CoverageDoclet"
}

task sourceJar(type: Jar, dependsOn: classes) {
    archiveClassifier = "sources"
    manifest {
        from gitManifest
    }
    from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
    archiveClassifier = "javadoc"
    manifest {
        from gitManifest
    }
    from javadoc.destinationDir
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            artifacts {
                artifact sourceJar
                artifact javadocJar
            }

            pom.withXml {
                def root = asNode()
                populatePom(root)
            }
        }
        mavenWar(MavenPublication) {
            groupId = "${project.group}.${rootProject.name}"
            artifactId = "xnat-${rootProject.name}"

            from components.web

            pom.withXml {
                def root = asNode()
                populatePom(root)
            }
        }
    }
    repositories {
        maven {
            url project.version.endsWith("-SNAPSHOT") ? "https://nrgxnat.jfrog.io/nrgxnat/libs-snapshot-local" : "https://nrgxnat.jfrog.io/nrgxnat/libs-release-local"
            // The value for name must match <id> in ~/.m2/settings.xml
            name = "XNAT_Artifactory"
        }
    }
}

def propertyWithDefault(String name, Object value) {
    hasProperty(name) ? property(name) : value
}

def populatePom(def root) {
    root.appendNode("name", "XNAT Server")
    root.appendNode("description", project.description)
    root.appendNode("url", "https://bitbucket.org/xnatdev/xnat-web")
    root.appendNode("inceptionYear", "2019")

    def scm = root.appendNode("scm")
    scm.appendNode("url", "https://bitbucket.org/xnatdev/xnat-web")
    scm.appendNode("connection", "scm:https://bitbucket.org/xnatdev/xnat-web.git")
    scm.appendNode("developerConnection", "scm:git://bitbucket.org/xnatdev/xnat-web.git")

    def license = root.appendNode("licenses").appendNode("license")
    license.appendNode("name", "Simplified BSD 2-Clause License")
    license.appendNode("url", "https://xnat.org/about/license.php")
    license.appendNode("distribution", "repo")

    def developers = root.appendNode("developers")
    [["akaushal", "Atul Kaushal", "atul.hkaushal@gmail.com"],
     ["cmoore", "Charlie Moore", "moore.c@wustl.edu"],
     ["dmaffitt", "Dave Maffitt", "david.maffitt@wustl.edu"],
     ["jcleveland", "Justin Cleveland", "clevelandj@wustl.edu"],
     ["jflavin", "John Flavin", "flavinj@gmail.com"],
     ["jgurney", "Jenny Gurney", "gkgurney@wustl.edu"],
     ["jransford", "James Ransford", "ransfordj@radiologics.com"],
     ["kalpert", "Kate Alpert", "kate@radiologics.com"],
     ["mflorida", "Mark Florida", "markflorida@wustl.edu"],
     ["mhodge", "Mike Hodge", "hodgem@wustl.edu"],
     ["mkelsey", "Matt Kelsey", "kelseym@mir.wustl.edu"],
     ["mmcKay", "Mike McKay", "mfmckay@wustl.edu"],
     ["mramaratnam", "Mohana Ramaratnam", "mohana@radiologics.com"],
     ["rherrick", "Rick Herrick", "jrherrick@wustl.edu"],
     ["smoore", "Steve Moore", "moores@mir.wustl.edu"],
     ["tolsen", "Tim Olsen", "tim@radiologics.com"],
     ["whorton", "Will Horton", "hortonw@wustl.edu"]].forEach({ info ->
        def developer = developers.appendNode("developer")
        developer.appendNode("id", info[0])
        developer.appendNode("name", info[1])
        developer.appendNode("email", info[2])
    })
}
